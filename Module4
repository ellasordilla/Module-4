// SPDX-License-Identifier: MIT
/*
1. Minting new tokens: The platform should be able to create new tokens and distribute them to players as rewards. Only the owner can mint tokens.
2. Transferring tokens: Players should be able to transfer their tokens to others.
3. Redeeming tokens: Players should be able to redeem their tokens for items in the in-game store.
4. Checking token balance: Players should be able to check their token balance at any time.
5. Burning tokens: Anyone should be able to burn tokens, that they own, that are no longer needed.
*/
pragma solidity ^0.8.20;

import "@openzeppelin/contracts/token/ERC20/ERC20.sol";
import "@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol";
import "@openzeppelin/contracts/access/Ownable.sol";

contract ELLABLACKSMITH is ERC20, Ownable {
    using SafeERC20 for IERC20;

    struct ShopItem {
        string name;
        uint256 price;
        uint256 stock;
    }

    mapping(uint256 => ShopItem) public shopItems;
    mapping(address => mapping(uint256 => uint256)) private _playerInventory;
    mapping(uint256 => address[]) private _itemPurchasers;

    address[] private raffleParticipants;
    uint256 private raffleTicketPrice = 1000;
    mapping(address => string) private rafflePrizes;

    event TokensMinted(address indexed to, uint256 amount);
    event TokensBurned(address indexed from, uint256 amount);
    event ItemPurchased(address indexed buyer, uint256 itemId, uint256 quantity);
    event RaffleEntered(address indexed participant);
    event RaffleWinner(address indexed winner, string prize);

    constructor() ERC20("Degen", "DGN") Ownable(msg.sender) {
        shopItems[1] = ShopItem("Wood Armor", 100, 10);
        shopItems[2] = ShopItem("Iron Armor", 150, 5);
        shopItems[3] = ShopItem("Gold Armor", 200, 3);
        shopItems[4] = ShopItem("Diamond Armor", 300, 2);
    }

    function mintTokens(address to, uint256 amount) external onlyOwner {
        _mint(to, amount);
        emit TokensMinted(to, amount);
    }

    function showShopItems() external view returns (string memory) {
        string memory items;
        for (uint256 i = 1; i <= 4; i++) { 
            items = string(abi.encodePacked(items, "{", uintToString(i), "} ", shopItems[i].name, " (", uintToString(shopItems[i].price), ") [Stock: ", uintToString(shopItems[i].stock), "] "));
        }
        return items;
    }

    function purchaseArmor(uint256 itemId) external {
        require(shopItems[itemId].price > 0, "Item not available.");
        require(shopItems[itemId].stock > 0, "Item is out of stock.");
        require(balanceOf(msg.sender) >= shopItems[itemId].price, "Insufficient balance.");
        
        _burn(msg.sender, shopItems[itemId].price); 
        _playerInventory[msg.sender][itemId] += 1;
        shopItems[itemId].stock -= 1;
        _itemPurchasers[itemId].push(msg.sender);

        emit ItemPurchased(msg.sender, itemId, 1);
    }

    function burnTokens(uint256 amount) external {
        _burn(msg.sender, amount);
        emit TokensBurned(msg.sender, amount);
    }

    function checkBalance() external view returns (uint256) {
        return balanceOf(msg.sender);
    }

    function checkArmorPurchased() external view returns (string memory) {
        string memory inventory;
        for (uint256 i = 1; i <= 4; i++) {
            if (_playerInventory[msg.sender][i] > 0) {
                inventory = string(abi.encodePacked(
                    inventory,
                    shopItems[i].name,
                    " (", uintToString(_playerInventory[msg.sender][i]), ") "
                ));
            }
        }
        return inventory;
    }

    function getArmorPurchased(uint256 itemId) external view returns (address[] memory) {
        return _itemPurchasers[itemId];
    }

    function enterRaffle() external {
        require(balanceOf(msg.sender) >= raffleTicketPrice, "Insufficient balance to enter raffle.");
        
        _burn(msg.sender, raffleTicketPrice); 
        raffleParticipants.push(msg.sender);

        emit RaffleEntered(msg.sender);
    }

    function drawRaffle() external onlyOwner {
        require(raffleParticipants.length >= 1, "Not enough participants for a raffle.");

        uint256 winnerIndex1 = random() % raffleParticipants.length;
        address winner1 = raffleParticipants[winnerIndex1];
        rafflePrizes[winner1] = "Longsword";
        emit RaffleWinner(winner1, "Longsword");

        if (raffleParticipants.length > 1) {
            uint256 winnerIndex2 = random() % raffleParticipants.length;
            while (winnerIndex2 == winnerIndex1) {
                winnerIndex2 = random() % raffleParticipants.length;
            }
            address winner2 = raffleParticipants[winnerIndex2];
            rafflePrizes[winner2] = "Broadsword";
            emit RaffleWinner(winner2, "Broadsword");

            if (raffleParticipants.length > 2) {
                uint256 winnerIndex3 = random() % raffleParticipants.length;
                while (winnerIndex3 == winnerIndex1 || winnerIndex3 == winnerIndex2) {
                    winnerIndex3 = random() % raffleParticipants.length;
                }
                address winner3 = raffleParticipants[winnerIndex3];
                rafflePrizes[winner3] = "Shortsword";
                emit RaffleWinner(winner3, "Shortsword");
            }
        }

        delete raffleParticipants;
    }

    function getRafflePrize(address participant) external view returns (string memory) {
        return rafflePrizes[participant];
    }

    function decimals() public pure override returns (uint8) {
        return 0;
    }

    function uintToString(uint256 v) internal pure returns (string memory) {
        if (v == 0) {
            return "0";
        }
        uint256 maxLength = 78;
        bytes memory reversed = new bytes(maxLength);
        uint256 i = 0;
        while (v != 0) {
            uint256 remainder = v % 10;
            v /= 10;
            reversed[i++] = bytes1(uint8(48 + remainder));
        }
        bytes memory s = new bytes(i); 
        for (uint256 j = 0; j < i; j++) {
            s[j] = reversed[i - j - 1];
        }
        return string(s);
    }

    function random() private view returns (uint256) {
        return uint256(keccak256(abi.encodePacked(block.timestamp, block.prevrandao, msg.sender)));
    }
}
